package small.business.swing.gui.nomenclature;

import java.util.List;

import javax.swing.table.DefaultTableModel;

import org.springframework.context.ApplicationContext;

import small.business.businesslayer.NomenclatureService;
import small.business.dao.entity.Nomenclature;
import small.business.swing.gui.utils.ModalFrameUtil;
import config.AppContext;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.log4j.Logger;
import small.business.businesslayer.SettingsService;
import small.business.dao.entity.Pictures;
import small.business.swing.gui.utils.GroupImageRenderer;

/**
 *
 * @author ihor
 */
public class NomenclatureSelectJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    static Logger log = Logger.getLogger(NomenclatureSelectJFrame.class.getName());
    private ApplicationContext ctx = AppContext.getApplicationContext();
    private NomenclatureService nomenclatureService = (NomenclatureService) ctx.getBean("nomenclatureService");
    private SettingsService settingsService = (SettingsService) ctx.getBean("settingsService");
    private final static int OBJECT_COLUMN = 2;
    private boolean isSearchMode = false;

    /**
     * Creates new form NomenclatureGroupSelectJFrame
     */
    public NomenclatureSelectJFrame() {
        initComponents();
        jTable.getColumnModel().getColumn(0).setCellRenderer(new GroupImageRenderer());
        nomenclatureService.setSelectedElement(null);
        if (nomenclatureService.getSelectType().equals(Nomenclature.GROUP)) {
            jButtonSelectToRooT.setEnabled(true);
        } else {
            jButtonSelectToRooT.setEnabled(false);
        }
        getList();
    }

    private void getList() {
        DefaultTableModel dataModel = (DefaultTableModel) jTable.getModel();
        dataModel.setRowCount(0);
        List<Nomenclature> dataList;
        if (isSearchMode) {
            dataList = nomenclatureService.getSearchDataList((Long) jSpinnerNomenclatureID.getValue(), jTextFieldSearchNomenclatureByTitle.getText(), jTextFieldSearchByFactorySerialArticul.getText(), jTextFieldSearchByAdditionalArticul.getText());
        } else {
            dataList = nomenclatureService.getDataList();
        }
        for (Nomenclature goods : dataList) {
            Object[] g;
            URL image = goods.isGroup().equals(Nomenclature.GROUP) ? goods.getId().equals(nomenclatureService.getCurrentCategoryId()) ? getClass().getResource("/small/business/swing/gui/images/up.png") : getClass().getResource("/small/business/swing/gui/images/group.png") : getClass().getResource("/small/business/swing/gui/images/element.png");
            if (jCheckBoxShowTheCalculationOf.isSelected()) {
                g = new Object[]{image, goods.getId(), goods, goods.getArticleofgoods(), goods.getArticleinside(), goods.getQuantity(), null, goods.getRetailPrice() == null ? null : (goods.getRetailPrice() * settingsService.getExchangeRate()), goods.getSmallWholeSalePrice() == null ? null : (goods.getSmallWholeSalePrice() * settingsService.getExchangeRate()), goods.getBigWholeSalePrice() == null ? null : (goods.getBigWholeSalePrice() * settingsService.getExchangeRate())};
            } else {
                g = new Object[]{image, goods.getId(), goods, goods.getArticleofgoods(), goods.getArticleinside(), goods.getQuantity(), goods.getPrice(), goods.getPriceretail(), goods.getPricesmallwholesale(), goods.getPricebigwholesale()};
            }
            dataModel.addRow(g);
        }
        jTable.setModel(dataModel);
        svalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "rawtypes", "serial"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonSelectToRooT = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jButtonSelect = new javax.swing.JButton();
        jButtonCreateNomenclature = new javax.swing.JButton();
        jButtonCreateGroupNomenclature = new javax.swing.JButton();
        jPanelSearch = new javax.swing.JPanel();
        jButtonSearch = new javax.swing.JButton();
        jLabelID = new javax.swing.JLabel();
        jSpinnerNomenclatureID = new javax.swing.JSpinner();
        jLabelTitle = new javax.swing.JLabel();
        jTextFieldSearchNomenclatureByTitle = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabelAdditionalArticul = new javax.swing.JLabel();
        jTextFieldSearchByFactorySerialArticul = new javax.swing.JTextField();
        jTextFieldSearchByAdditionalArticul = new javax.swing.JTextField();
        jLabelFactorySerialArticul = new javax.swing.JLabel();
        jButtonClearSearch = new javax.swing.JButton();
        jCheckBoxShowTheCalculationOf = new javax.swing.JCheckBox();
        jSplitPanel = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePictures = new javax.swing.JTable();
        jScrollPane = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Вибір номенклатури");
        setExtendedState(6);

        jButtonSelectToRooT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small/business/swing/gui/images/save.png"))); // NOI18N
        jButtonSelectToRooT.setText("В кореневий каталог");
        jButtonSelectToRooT.setEnabled(false);
        jButtonSelectToRooT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectToRooTActionPerformed(evt);
            }
        });

        jButtonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small/business/swing/gui/images/exit.png"))); // NOI18N
        jButtonClose.setText("Закрити");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small/business/swing/gui/images/save.png"))); // NOI18N
        jButtonSelect.setText("Вибрати");
        jButtonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectActionPerformed(evt);
            }
        });

        jButtonCreateNomenclature.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small/business/swing/gui/images/add.png"))); // NOI18N
        jButtonCreateNomenclature.setText("Створити");
        jButtonCreateNomenclature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateNomenclatureActionPerformed(evt);
            }
        });

        jButtonCreateGroupNomenclature.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small/business/swing/gui/images/addgroup.png"))); // NOI18N
        jButtonCreateGroupNomenclature.setText("Створити групу");
        jButtonCreateGroupNomenclature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateGroupNomenclatureActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButtonSelect)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonClose)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonCreateNomenclature)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonCreateGroupNomenclature)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSelectToRooT)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButtonSelectToRooT, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonCreateGroupNomenclature, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonSelect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonClose, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonCreateNomenclature))
                .add(2, 2, 2))
        );

        jButtonSearch.setText("Пошук");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelID.setText("id:");

        jSpinnerNomenclatureID.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        jLabelTitle.setText("Найменування:");

        jLabelAdditionalArticul.setText("Внутрішній артикул:");

        jLabelFactorySerialArticul.setText("Заводський артикул:");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelFactorySerialArticul)
                    .add(jTextFieldSearchByFactorySerialArticul, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabelAdditionalArticul)
                        .add(127, 127, 127))
                    .add(jTextFieldSearchByAdditionalArticul)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelAdditionalArticul)
                    .add(jLabelFactorySerialArticul)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldSearchByFactorySerialArticul, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextFieldSearchByAdditionalArticul, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(0, 0, 0))
        );

        jButtonClearSearch.setText("Очистити");
        jButtonClearSearch.setEnabled(false);
        jButtonClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearSearchActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelSearchLayout = new org.jdesktop.layout.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanelSearchLayout.createSequentialGroup()
                        .add(jLabelID)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSpinnerNomenclatureID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabelTitle)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextFieldSearchNomenclatureByTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButtonSearch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonClearSearch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSearchLayout.createSequentialGroup()
                .add(2, 2, 2)
                .add(jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelTitle)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelID)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSpinnerNomenclatureID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldSearchNomenclatureByTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSearchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonClearSearch))
                .add(2, 2, 2))
        );

        jCheckBoxShowTheCalculationOf.setSelected(true);
        jCheckBoxShowTheCalculationOf.setText("Показувати в грн");
        jCheckBoxShowTheCalculationOf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowTheCalculationOfActionPerformed(evt);
            }
        });

        jSplitPanel.setDividerLocation(769);
        jSplitPanel.setDividerSize(6);

        jTablePictures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Зображення", "Опис"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePictures.setRowHeight(40);
        jTablePictures.getTableHeader().setReorderingAllowed(false);
        jTablePictures.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePicturesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTablePicturesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePictures);
        jTablePictures.getColumnModel().getColumn(0).setMaxWidth(40);

        jSplitPanel.setRightComponent(jScrollPane1);

        jTable.setAutoCreateRowSorter(true);
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Група", "id", "Найменування", "Заводський Артикул", "Внутрішній Артикул", "Кількість", "Ціна", "Роздріб", "Опт", "Крупний опт"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Long.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.getTableHeader().setReorderingAllowed(false);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableMouseReleased(evt);
            }
        });
        jScrollPane.setViewportView(jTable);
        jTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        jTable.getColumnModel().getColumn(0).setMaxWidth(60);
        jTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTable.getColumnModel().getColumn(1).setMaxWidth(50);
        jTable.getColumnModel().getColumn(2).setPreferredWidth(267);
        jTable.getColumnModel().getColumn(5).setPreferredWidth(60);
        jTable.getColumnModel().getColumn(5).setMaxWidth(60);
        jTable.getColumnModel().getColumn(6).setPreferredWidth(60);
        jTable.getColumnModel().getColumn(6).setMaxWidth(60);
        jTable.getColumnModel().getColumn(7).setPreferredWidth(60);
        jTable.getColumnModel().getColumn(7).setMaxWidth(60);
        jTable.getColumnModel().getColumn(8).setPreferredWidth(60);
        jTable.getColumnModel().getColumn(8).setMaxWidth(60);
        jTable.getColumnModel().getColumn(9).setPreferredWidth(80);
        jTable.getColumnModel().getColumn(9).setMaxWidth(80);

        jSplitPanel.setLeftComponent(jScrollPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 167, Short.MAX_VALUE)
                .add(jCheckBoxShowTheCalculationOf)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(jSplitPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBoxShowTheCalculationOf))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        isSearchMode = true;
        jButtonClearSearch.setEnabled(true);
        getList();
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearSearchActionPerformed
        jSpinnerNomenclatureID.setValue(0L);
        jTextFieldSearchNomenclatureByTitle.setText("");
        jTextFieldSearchByFactorySerialArticul.setText("");
        jTextFieldSearchByAdditionalArticul.setText("");
        isSearchMode = false;
        jButtonClearSearch.setEnabled(false);
        getList();
    }//GEN-LAST:event_jButtonClearSearchActionPerformed

    private void jButtonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectActionPerformed
        if (jTable.getSelectedRow() >= 0) {
            Nomenclature selectedObject = (Nomenclature) jTable.getValueAt(jTable.getSelectedRow(), OBJECT_COLUMN);
            nomenclatureService.setSelectedElement(selectedObject);
            nomenclatureService.setSelected(true);
            dispose();
        }
    }//GEN-LAST:event_jButtonSelectActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        if (jTable.getSelectedRow() >= 0) {
            Nomenclature selectedObject = (Nomenclature) jTable.getValueAt(jTable.getSelectedRow(), OBJECT_COLUMN);
            if (evt.getClickCount() == 2) {
                svalidate();
                if (nomenclatureService.isCanSelect() && nomenclatureService.getSelectType().equals(Nomenclature.NOMENCLATURE)) {
                    nomenclatureService.setSelectedElement(selectedObject);
                    nomenclatureService.setSelected(true);
                    dispose();
                } else {
                    if (nomenclatureService.getSelectType().equals(Nomenclature.GROUP)) {
                        if (!selectedObject.getId().equals(nomenclatureService.getCurrentElement().getId())) {
                            nomenclatureService.setCurrentCategory(selectedObject);
                            getList();
                        }
                    } else {
                        nomenclatureService.setCurrentCategory(selectedObject);
                        getList();
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void jButtonCreateGroupNomenclatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateGroupNomenclatureActionPerformed
        nomenclatureService.setCurrentElement(new Nomenclature(Nomenclature.GROUP));
        GroupElementJFrame groupElement = new GroupElementJFrame();
        groupElement.pack();
        ModalFrameUtil.showAsModal(groupElement, this);
        getList();
    }//GEN-LAST:event_jButtonCreateGroupNomenclatureActionPerformed

    private void jButtonCreateNomenclatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateNomenclatureActionPerformed
        nomenclatureService.setCurrentElement(new Nomenclature(Nomenclature.NOMENCLATURE));
        NomenclatureElementJFrame nomenclatureElement = new NomenclatureElementJFrame();
        nomenclatureElement.pack();
        ModalFrameUtil.showAsModal(nomenclatureElement, this);
        getList();
    }//GEN-LAST:event_jButtonCreateNomenclatureActionPerformed

    private void jTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseReleased
        showPictures();
        svalidate();
    }//GEN-LAST:event_jTableMouseReleased

    private void jCheckBoxShowTheCalculationOfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowTheCalculationOfActionPerformed
        getList();
    }//GEN-LAST:event_jCheckBoxShowTheCalculationOfActionPerformed

    private void jTablePicturesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePicturesMouseClicked
        //picturesValidate();
    }//GEN-LAST:event_jTablePicturesMouseClicked

    private void jTablePicturesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePicturesMouseReleased
        //picturesValidate();
    }//GEN-LAST:event_jTablePicturesMouseReleased

    private void jButtonSelectToRooTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectToRooTActionPerformed
        nomenclatureService.setSelectedElement(new Nomenclature(0L, Nomenclature.GROUP));
        nomenclatureService.setSelected(true);
        dispose();
    }//GEN-LAST:event_jButtonSelectToRooTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel
         * /plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NomenclatureSelectJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NomenclatureSelectJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NomenclatureSelectJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NomenclatureSelectJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NomenclatureSelectJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearSearch;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonCreateGroupNomenclature;
    private javax.swing.JButton jButtonCreateNomenclature;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JButton jButtonSelectToRooT;
    private javax.swing.JCheckBox jCheckBoxShowTheCalculationOf;
    private javax.swing.JLabel jLabelAdditionalArticul;
    private javax.swing.JLabel jLabelFactorySerialArticul;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerNomenclatureID;
    private javax.swing.JSplitPane jSplitPanel;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTablePictures;
    private javax.swing.JTextField jTextFieldSearchByAdditionalArticul;
    private javax.swing.JTextField jTextFieldSearchByFactorySerialArticul;
    private javax.swing.JTextField jTextFieldSearchNomenclatureByTitle;
    // End of variables declaration//GEN-END:variables

    private void svalidate() {
        Nomenclature selectedObject = null;
        if (jTable.getSelectedRow() >= 0) {
            selectedObject = (Nomenclature) jTable.getValueAt(jTable.getSelectedRow(), OBJECT_COLUMN);
        }
        nomenclatureService.setSelectedElement(selectedObject);
        nomenclatureService.validate();
        jButtonSelect.setEnabled(nomenclatureService.isCanSelect());
    }

    class ImageRenderer extends DefaultTableCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel();
            if (value != null) {
                label.setHorizontalAlignment(JLabel.CENTER);
                //value is parameter which filled by byteOfImage
                label.setIcon(new ImageIcon((byte[]) value));
            }
            return label;
        }
    }

    private void showPictures() {
        if (jTable.getSelectedRow() >= 0) {
            Nomenclature selectedObject = (Nomenclature) jTable.getValueAt(jTable.getSelectedRow(), OBJECT_COLUMN);
            DefaultTableModel dataModel = (DefaultTableModel) jTablePictures.getModel();
            dataModel.setRowCount(0);
            jTablePictures.getColumnModel().getColumn(1).setCellRenderer(new NomenclatureSelectJFrame.ImageRenderer());
            int i = 0;
            for (Pictures pic : selectedObject.getPictures()) {
                try {
                    BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(pic.getData()));
                    Object[] g = new Object[]{pic, pic.getData(), pic.getInfo()};
                    dataModel.addRow(g);
                    jTablePictures.setRowHeight(i, bufferedImage.getHeight());
                    i++;
                } catch (Exception ex) {
                    log.error(ex);
                }
            }
            jTablePictures.setModel(dataModel);
        }
    }
}