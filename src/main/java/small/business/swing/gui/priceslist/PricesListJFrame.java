package small.business.swing.gui.priceslist;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Tuple;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.springframework.context.ApplicationContext;

import small.business.businesslayer.SettingsService;
import small.business.dao.NomenclatureDAO;
import small.business.dao.entity.Nomenclature;
import config.AppContext;

/**
 *
 * @author ihor
 */
public class PricesListJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    static Logger log = Logger.getLogger(PricesListJFrame.class.getName());
    private ApplicationContext ctx = AppContext.getApplicationContext();
    private NomenclatureDAO nomenclatureDAO = (NomenclatureDAO) ctx.getBean("nomenclatureDAO");
    private SettingsService settingsService = (SettingsService) ctx.getBean("settingsService");
    private EntityManagerFactory entityManagerFactory = (EntityManagerFactory) ctx.getBean("entityManagerFactory");
    private int recordNumber = 0;

    /**
     * Creates new form PricesListJFrame
     */
    public PricesListJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCreatePricesList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Прайс Лист");
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jButtonCreatePricesList.setText("Створити прайс лист");
        jButtonCreatePricesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePricesListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCreatePricesList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCreatePricesList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreatePricesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePricesListActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter excelFilter = new FileNameExtensionFilter("Excel document (*.xls)", "xls");
        fc.addChoosableFileFilter(excelFilter);
        fc.setFileFilter(excelFilter);
        fc.setSelectedFile(new File("PricesList"));
        fc.setAcceptAllFileFilterUsed(false);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            HSSFWorkbook workbook = new HSSFWorkbook();
            CreationHelper createHelper = workbook.getCreationHelper();
            HSSFSheet sheet = workbook.createSheet("Прайс лист");

            recordNumber = 0;
            HSSFRow row = sheet.createRow(recordNumber);
            row.createCell(0).setCellValue(createHelper.createRichTextString("Найменування"));
            row.createCell(1).setCellValue(createHelper.createRichTextString("Артикул"));
            row.createCell(2).setCellValue(createHelper.createRichTextString("Роздріб"));
            row.createCell(3).setCellValue(createHelper.createRichTextString("Дрібний опт"));
            row.createCell(4).setCellValue(createHelper.createRichTextString("Крупний опт"));
            row.createCell(5).setCellValue(createHelper.createRichTextString("Наявність на складі"));
            row.createCell(6).setCellValue(createHelper.createRichTextString("Курс Валют"));
            row.createCell(7).setCellValue((double)settingsService.getExchangeRate());
            //
            HSSFCellStyle style = sheet.getWorkbook().createCellStyle();
            style.setFillBackgroundColor(HSSFColor.GREY_25_PERCENT.index);
            HSSFFont font = sheet.getWorkbook().createFont();
            font.setFontName(HSSFFont.FONT_ARIAL);
            font.setFontHeightInPoints((short) 12);
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setColor(HSSFColor.BLACK.index);
            style.setFont(font);
            for (int i = 0; i <= 7; i++) {
                row.getCell(i).setCellStyle(style);
                sheet.autoSizeColumn(i);
            }
            recordNumber++;
            rData(sheet, 0L);
            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            FileOutputStream fileOut = null;
            try {
                fileOut = new FileOutputStream(fc.getSelectedFile() + "." + excelFilter.getExtensions()[0]);
                workbook.write(fileOut);
            } catch (Exception e) {
                log.error(e.getMessage(), e);
            } finally {
                try {
                    fileOut.flush();
                    fileOut.close();
                    dispose();
                } catch (IOException e) {
                	log.error(e.getMessage(), e);
                }
            }
        }
    }//GEN-LAST:event_jButtonCreatePricesListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PricesListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PricesListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PricesListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PricesListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PricesListJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreatePricesList;
    // End of variables declaration//GEN-END:variables

    private void rData(HSSFSheet sheet, Long id) {
        try {
            EntityManager entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder cb = entityManager.getCriteriaBuilder();
            CriteriaQuery<Tuple> criteriaQuery = cb.createTupleQuery();
            Root<Nomenclature> fromNomenclature = criteriaQuery.from(Nomenclature.class);
            criteriaQuery.multiselect(fromNomenclature.get("id"), fromNomenclature.get("isgroup"), fromNomenclature.get("title"), fromNomenclature.get("articleofgoods"), fromNomenclature.get("articleinside"), fromNomenclature.<Integer>get("quantity"), fromNomenclature.<Double>get("price"), fromNomenclature.<Integer>get("priceretail"), fromNomenclature.<Integer>get("pricesmallwholesale"), fromNomenclature.<Integer>get("pricebigwholesale"));
            criteriaQuery.where(cb.equal(fromNomenclature.get("parentid"), id));
            criteriaQuery.orderBy(cb.asc(fromNomenclature.get("title")), cb.asc(fromNomenclature.<Double>get("price")));
            //
            for (Tuple n : entityManager.createQuery(criteriaQuery).getResultList()) {
                if (String.valueOf(n.get(1)).equals(Nomenclature.GROUP) && nomenclatureDAO.isHaveRecordsHierarchicalData(id)) {

                    HSSFCellStyle style = sheet.getWorkbook().createCellStyle();
                    style.setFillBackgroundColor(HSSFColor.GREY_25_PERCENT.index);
                    HSSFFont font = sheet.getWorkbook().createFont();
                    font.setFontName(HSSFFont.FONT_ARIAL);
                    font.setFontHeightInPoints((short) 12);
                    font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                    font.setColor(HSSFColor.BLUE.index);
                    style.setFont(font);

                    HSSFCell cell = sheet.createRow(recordNumber).createCell(0);
                    cell.setCellValue((String) n.get(2));
                    cell.setCellStyle(style);
                    recordNumber++;
                } else {
                    if (String.valueOf(n.get(1)).equals(Nomenclature.NOMENCLATURE)) {
                        sheet.createRow(recordNumber).createCell(0).setCellValue((String) n.get(2));
                        sheet.getRow(recordNumber).createCell(1).setCellValue((String) n.get(4));
                        sheet.getRow(recordNumber).createCell(2).setCellValue((double) n.get(6) * (((int) n.get(7) * 0.01 + 1) * settingsService.getExchangeRate()));
                        sheet.getRow(recordNumber).createCell(3).setCellValue((double) n.get(6) * (((int) n.get(8) * 0.01 + 1) * settingsService.getExchangeRate()));
                        sheet.getRow(recordNumber).createCell(4).setCellValue((double) n.get(6) * (((int) n.get(9) * 0.01 + 1) * settingsService.getExchangeRate()));
                        sheet.getRow(recordNumber).createCell(5).setCellValue((int) n.get(5) == 0 ? "під замовлення" : "так");
                        recordNumber++;
                    }
                }
                if (String.valueOf(n.get(1)).equals(Nomenclature.GROUP) && nomenclatureDAO.isHaveRecordsHierarchicalData((Long) n.get(0))) {
                    rData(sheet, (Long) n.get(0));
                }
            }
        } catch (Exception e) {
        	log.error(e.getMessage(), e);
        }
    }
}